package ch.ethz.inf.vs.californium.dtls;

import java.security.SecureRandom;

/**
 * A 32-byte value provided by the client and the server in the
 * {@link ClientHello} respectively in the {@link ServerHello} used later in the
 * protocol to compute the premaster secret.
 * 
 * @author Stefan Jucker
 * 
 */
public class Random {

	/**
	 * The current time and date in standard UNIX 32-bit format + 28 bytes
	 * generated by a secure random number generator
	 */
	private byte[] randomBytes;

	public Random() {
		this.randomBytes = new byte[0];
	}

	public Random(SecureRandom generator) {
		int gmtUnixTime = (int) System.currentTimeMillis() / 1000;

		this.randomBytes = new byte[32];
		// fill all 32 bytes with random bytes
		generator.nextBytes(this.randomBytes);

		// overwrite the first 4 bytes with the UNIX time
		this.randomBytes[0] = (byte) (gmtUnixTime >> 24);
		this.randomBytes[1] = (byte) (gmtUnixTime >> 16);
		this.randomBytes[2] = (byte) (gmtUnixTime >> 8);
		this.randomBytes[3] = (byte) gmtUnixTime;
	}

	public Random(byte[] randomBytes) {
		this.randomBytes = randomBytes;
	}

	/**
	 * Gets the random bytes.
	 * 
	 * @return the random bytes
	 */
	public byte[] getRandomBytes() {
		return randomBytes;
	}

}